#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ rate limit detection
–ò–º–∏—Ç–∏—Ä—É–µ—Ç API —Å rate limits –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import json
import time
from datetime import datetime, timedelta
from typing import Dict, List
from aiohttp import web, web_request
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RateLimitServer:
    def __init__(self):
        # –°—á–µ—Ç—á–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ IP –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫–Ω–∞–º
        self.request_counts: Dict[str, Dict[str, List[float]]] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ rate limits (–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É)
        self.rate_limits = {
            "10_seconds": 20,    # 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 10 —Å–µ–∫—É–Ω–¥
            "minute": 100,       # 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É  
            "hour": 5000,        # 5000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
        }
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.windows = {
            "10_seconds": 10,
            "minute": 60,
            "hour": 3600,
        }
        
    def _get_client_ip(self, request: web_request.Request) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å IP –∫–ª–∏–µ–Ω—Ç–∞"""
        return request.remote or "127.0.0.1"
    
    def _cleanup_old_requests(self, client_ip: str, window: str, current_time: float):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        if client_ip not in self.request_counts:
            self.request_counts[client_ip] = {}
        
        if window not in self.request_counts[client_ip]:
            self.request_counts[client_ip][window] = []
        
        window_size = self.windows[window]
        cutoff_time = current_time - window_size
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.request_counts[client_ip][window] = [
            req_time for req_time in self.request_counts[client_ip][window]
            if req_time > cutoff_time
        ]
    
    def _check_rate_limit(self, client_ip: str) -> tuple[bool, str, int]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å rate limit –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (is_limited, limit_type, remaining_requests)
        """
        current_time = time.time()
        
        for window, limit in self.rate_limits.items():
            self._cleanup_old_requests(client_ip, window, current_time)
            
            current_count = len(self.request_counts[client_ip][window])
            
            if current_count >= limit:
                return True, window, 0
        
        # –ï—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
        min_remaining = float('inf')
        for window, limit in self.rate_limits.items():
            current_count = len(self.request_counts[client_ip][window])
            remaining = limit - current_count
            min_remaining = min(min_remaining, remaining)
        
        return False, "", int(min_remaining)
    
    def _record_request(self, client_ip: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤ —Å—á–µ—Ç—á–∏–∫–∏"""
        current_time = time.time()
        
        if client_ip not in self.request_counts:
            self.request_counts[client_ip] = {}
        
        for window in self.windows:
            if window not in self.request_counts[client_ip]:
                self.request_counts[client_ip][window] = []
            
            self.request_counts[client_ip][window].append(current_time)
    
    async def handle_request(self, request: web_request.Request) -> web.Response:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π rate limit"""
        client_ip = self._get_client_ip(request)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        is_limited, limit_type, remaining = self._check_rate_limit(client_ip)
        
        if is_limited:
            logger.warning(f"Rate limit exceeded for {client_ip}: {limit_type}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 429 Too Many Requests
            headers = {
                "X-RateLimit-Limit": str(self.rate_limits[limit_type]),
                "X-RateLimit-Remaining": "0",
                "X-RateLimit-Reset": str(int(time.time() + self.windows[limit_type])),
                "Retry-After": str(self.windows[limit_type]),
            }
            
            return web.json_response(
                {"error": "Rate limit exceeded", "limit_type": limit_type},
                status=429,
                headers=headers
            )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        self._record_request(client_ip)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ rate limit –≤ –æ—Ç–≤–µ—Ç
        headers = {
            "X-RateLimit-Limit-10s": str(self.rate_limits["10_seconds"]),
            "X-RateLimit-Remaining-10s": str(self.rate_limits["10_seconds"] - len(self.request_counts[client_ip].get("10_seconds", []))),
            "X-RateLimit-Limit-1m": str(self.rate_limits["minute"]),
            "X-RateLimit-Remaining-1m": str(self.rate_limits["minute"] - len(self.request_counts[client_ip].get("minute", []))),
            "X-RateLimit-Limit-1h": str(self.rate_limits["hour"]),
            "X-RateLimit-Remaining-1h": str(self.rate_limits["hour"] - len(self.request_counts[client_ip].get("hour", []))),
        }
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        response_data = {
            "message": "Success",
            "timestamp": datetime.now().isoformat(),
            "client_ip": client_ip,
            "endpoint": str(request.url),
            "method": request.method,
            "rate_limits": {
                "10_seconds": {
                    "limit": self.rate_limits["10_seconds"],
                    "used": len(self.request_counts[client_ip].get("10_seconds", [])),
                    "remaining": self.rate_limits["10_seconds"] - len(self.request_counts[client_ip].get("10_seconds", []))
                },
                "minute": {
                    "limit": self.rate_limits["minute"],
                    "used": len(self.request_counts[client_ip].get("minute", [])),
                    "remaining": self.rate_limits["minute"] - len(self.request_counts[client_ip].get("minute", []))
                }
            }
        }
        
        logger.info(f"Request from {client_ip}: {remaining} requests remaining")
        
        return web.json_response(response_data, headers=headers)

async def create_app() -> web.Application:
    """–°–æ–∑–¥–∞—Ç—å aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    server = RateLimitServer()
    
    app = web.Application()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö endpoints
    app.router.add_get('/get', server.handle_request)
    app.router.add_get('/status/200', server.handle_request)
    app.router.add_get('/delay/1', server.handle_request)
    app.router.add_get('/api/v1/test', server.handle_request)
    app.router.add_get('/user', server.handle_request)
    app.router.add_get('/', server.handle_request)
    
    return app

async def main():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä"""
    app = await create_app()
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, '127.0.0.1', 8888)
    await site.start()
    
    logger.info("üöÄ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:8888")
    logger.info("üìä Rate limits:")
    logger.info("   ‚Ä¢ 10 —Å–µ–∫—É–Ω–¥: 20 –∑–∞–ø—Ä–æ—Å–æ–≤")
    logger.info("   ‚Ä¢ 1 –º–∏–Ω—É—Ç–∞: 100 –∑–∞–ø—Ä–æ—Å–æ–≤")
    logger.info("   ‚Ä¢ 1 —á–∞—Å: 5000 –∑–∞–ø—Ä–æ—Å–æ–≤")
    logger.info("üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
    logger.info("   ‚Ä¢ GET /get")
    logger.info("   ‚Ä¢ GET /status/200")
    logger.info("   ‚Ä¢ GET /delay/1")
    logger.info("   ‚Ä¢ GET /api/v1/test")
    logger.info("   ‚Ä¢ GET /user")
    logger.info("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    finally:
        await runner.cleanup()

if __name__ == "__main__":
    asyncio.run(main())
